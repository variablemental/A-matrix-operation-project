#include "stdafx.h"
#include<iostream>
using namespace std;
class vector
{
private:
		int *position;
		int n;
public:
		/*vector(int num);*/
		vector add(vector b);
		vector sub(vector b);
		int mutiply(vector b);
		int *getpostion();
		int getpoint(int num);
		void setvectors();
		void setvector(int p,int num);
		void fornewvector(int num);
		int getnum();
		void print();
		//~vector();
};

void vector::fornewvector(int num)
{
	n=num;
	position=new int[num];
}


void vector::setvectors()
{
	int i;
	for(i=0;i<n;i++)
	{
		cout<<"输入第"<<i+1<<"个坐标"<<endl;
		cin>>position[i];
	}
}

void vector::print()
{
	int i;
	cout<<"(";
	for(i=0;i<n-1;i++)
		cout<<position[i]<<",";
	cout<<position[n-1]<<")"<<endl;
}

void vector::setvector(int p,int num)
{
	position[num]=p;
}

int vector::getpoint(int num)
{return position[num];}

//vector::vector(int num)
//{
//	n=num;
//	position=new int[num];
//}

int *vector::getpostion()
{return position;}

int vector::getnum()
{return n;}

vector vector::add(vector b)
{
	int i;
	vector conclusion;
	conclusion.fornewvector(b.getnum());
	if(n!=b.getnum())
		return conclusion;
	else
		{
			for(i=0;i<n;i++)
				conclusion.setvector(position[i]+b.getpoint(i),i);
		}
	return conclusion;
}

vector vector::sub(vector b)
{
	int i;
	vector conclusion;
	conclusion.fornewvector((b.getnum()));
	if(n!=b.getnum())
		return conclusion;
	else
		{
			for(i=0;i<n;i++)
				conclusion.setvector(position[i]-b.getpoint(i),i);
		}
	return conclusion;
}

int vector::mutiply(vector b)
{
	int i,conclusion=0;
	if(n!=b.getnum())
		return 0;
	else
		{
			for(i=0;i<n;i++)
				conclusion+=position[i]*b.getpoint(i);
		}
	return conclusion;
}

class matrix
{
private:
		vector *p;
		int row;
		int line;
public:
		matrix(int r,int l);
		int getinfo(int r,int l);
		void setmatrix(int r,int l,int num);
		void addline(vector a);
		matrix add(matrix b);
		matrix sub(matrix b);
		matrix mutiply(matrix b);
		vector getline(int r);
		int getroworline(int s);
		void setline(vector a,int r);
		void display();
		void initmatrix();
};

matrix::matrix(int r,int l)
{
	int i;
	row=r;line=l;
	cout<<row;cout<<line;
	p=new vector[r];
	for(i=0;i<r;i++)
		p[i].fornewvector(l);
}

vector matrix::getline(int r)
{return p[r];}

int matrix::getinfo(int r,int l)
{return p[r].getpoint(l);}

void matrix::setmatrix(int r,int l,int num)
{p[r].setvector(num,l);}

void matrix::setline(vector a,int r)
{p[r]=a;}

//void matrix::addline(vector a)
//{
//	p+row*(sizeof(vector))=new vector[1];
//	*(p+row*(sizeof(vector)))=a;
//}

int matrix::getroworline(int s)
{
	switch(s)
	{
	case 1:return row;
	case 2:return line;
	}
}

matrix matrix::add(matrix b)
{
	if(b.getroworline(1)!=row||b.getroworline(2)!=line)
	{
		cout<<"false!";
		return b;
	}
	else
	{
		int i;
		matrix conclusion(row,line);
		for(i=0;i<row;i++)
		{
			vector con;
			con.fornewvector((b.getline(0).getnum()));
			con=p[i].add(b.getline(i));
			p[i].print();
			conclusion.setline(con,i);
		}
		return conclusion;
	}
}

matrix matrix::sub(matrix b)
{
	if(b.getroworline(1)!=row||b.getroworline(2)!=line)
	{
		cout<<"false!";
		return b;
	}
	else
	{
		int i;
		matrix conclusion(row,line);
		for(i=0;i<row;i++)
		{
			vector con;
			con.fornewvector((b.getline(0).getnum()));
			con=p[i].sub(b.getline(i));
			p[i].print();
			conclusion.setline(con,i);
		}
		return conclusion;
	}
}

matrix matrix::mutiply(matrix b)
{
	if(line!=b.getroworline(1))
		return b;
	else
	{
		int i,j,q;
		matrix conclusion(row,b.getroworline(2));
		for(i=0;i<row;i++)
		{
			vector temp;
			temp.fornewvector(line);
			for(j=0;j<conclusion.getroworline(2);j++)
			{
				int con;
				for(q=0;q<line;q++)	{temp.setvector(b.getinfo(q,j),q);}
				temp.print();
				con=p[i].mutiply(temp);
				cout<<con;
				conclusion.setmatrix(i,j,con);
			}
		}
		return conclusion;
	}
}

void matrix::display()
{
	int i,j;
	for(i=0;i<row;i++)
	{
		for(j=0;j<line;j++)
			cout<<getinfo(i,j)<<" ";
		cout<<endl;
	}
	cout<<endl;
}

void matrix::initmatrix()
{
	int i;
	for(i=0;i<row;i++)
	{
		cout<<"输入第"<<i+1<<"行数据"<<endl;
		p[i].setvectors();
	}
	display();
}


int _tmain()//int argc, _TCHAR* argv[]
{
	int r,l,s;
	cout<<"输入第一个矩阵的长:";cin>>r;cout<<endl;
	cout<<"宽:";cin>>l;cout<<endl;
	matrix a(r,l);
	a.initmatrix();
	cout<<"输入第二个矩阵的长:";cin>>r;cout<<endl;
	cout<<"宽:";cin>>l;cout<<endl;
	matrix b(r,l);
	b.initmatrix();
	while(1)
	{
		cout<<"1.矩阵相加"<<endl;
		cout<<"2.矩阵相减"<<endl;
		cout<<"3.矩阵相乘"<<endl;
		cout<<"0.退出"<<endl;
		cin>>s;
		switch(s)
		{
		case 1:{
				matrix c(a.getroworline(1),a.getroworline(2));
				c=a.add(b);
				a.display();cout<<"+";b.display();cout<<"="<<endl;
				c.display();
				break;
			   }
		case 2:{
				matrix c(a.getroworline(1),a.getroworline(2));
				c=a.sub(b);
				a.display();cout<<"-";b.display();cout<<"="<<endl;
				c.display();
				break;
			   }
		case 3:{
				matrix c(a.getroworline(1),b.getroworline(2));
				c=a.mutiply(b);
				a.display();cout<<"*";b.display();cout<<"="<<endl;
				cout<<endl;
				c.display();
				break;
			   }
		case 4:exit(0);
		}
	}
	system("pause");
}
